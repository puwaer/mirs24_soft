amcl:
  ros__parameters:
    use_sim_time: True  # シミュレーション時間を使用するかどうか
    alpha1: 0.2         # ロボットの動きの回転成分から、オドメトリの回転推定で予想されるノイズを指定します。
    alpha2: 0.2         # ロボットの動きの並進成分から、オドメトリの回転推定で予想されるノイズを指定します。
    alpha3: 0.2         # ロボットの動きの並進コンポーネントから、オドメトリの並進推定で予想されるノイズを指定します。
    alpha4: 0.2         # ロボットの動きの回転成分から、オドメトリの並進推定で予想されるノイズを指定します。
    alpha5: 0.2         # 平行移動関連のノイズ パラメータ (モデルが"omni"(オムニホイール)の場合のみ使用)。
    base_frame_id: "base_footprint" # ロボットベースフレーム
    beam_skip_distance: 0.5         # 位置しないビームを無視する最大距離(m)
    beam_skip_error_threshold: 0.9  # 位置推定が収束しない場合の一致しないビームの割合
    beam_skip_threshold: 0.3        # sスキップに必要なビームのパーセンテージ
    do_beamskip: false              # ビームスキップを行うかどうか
    global_frame_id: "map"          # amcl で発行されるトピック名称
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0  # map 上で障害物を観測する最大距離(障害物のサイズ?)
    laser_max_range: 40.0      # 最大スキャン範囲
    laser_min_range: -1.0           # 最小スキャン範囲、-1でURDFより引用？
    laser_model_type: "likelihood_field"  # beam, likelihood_field, or likelihood_field_prob
    set_initial_pose: False         # ロボットの初期姿勢を .yaml で指定するかどうか
    initial_pose: {x: 0.0, y: 0.0, z: 0.0, yaw: 0.0}  # 初期姿勢
    max_beams: 60                   # フィルタ更新時の使用するビームの数
    max_particles: 2000             # パーティクルの最大許容数
    min_particles: 500              # 最小許容数
    odom_frame_id: "odom"           # オドメトリトピック
    pf_err: 0.05                    # パーティクルフィルタのエラー値
    pf_z: 0.99                      # パーティクルフィルタの密度
    recovery_alpha_fast: 0.0        # リカバリタイミングを決める？
    recovery_alpha_slow: 0.0        # リカバリタイミングを決める？
    resample_interval: 1            # リカバリタイミングを決める？
    robot_model_type: "differential"  # galacticはnav2_amcl::DifferentialMotionModel or nav2_amcl::OmniMotionModel
    save_pose_rate: 0.5             # 最後に推定されたポーズを保存する周期(Hz)、初期化時に呼び出し
    sigma_hit: 0.2                  # ガウス モデルの標準偏差
    tf_broadcast: true              # map - odom 間の変換を行うかどうか
    transform_tolerance: 1.0        # 変換したタイムスタンプを更新する間隔(s)
    update_min_a: 0.2               # フィルタ更新時の最小回転運動量
    update_min_d: 0.25              # フィルタ更新時の最小並進運動量
    z_hit: 0.5                      # 重み
    z_max: 0.05                     # 重み
    z_rand: 0.5                     # 重み
    z_short: 0.05                   # 重み
    scan_topic: scan                # サブスクライブするスキャントピック

amcl_map_client:
  ros__parameters:
    use_sim_time: True              # シミュレーション時間を使用するかどうか

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True              # シミュレーション時間を使用するかどうか

bt_navigator:
  ros__parameters:
    use_sim_time: True              # シミュレーション時間を使用するかどうか
    global_frame: map               # 参照するマップトピック
    robot_base_frame: base_link     # bt の対象フレーム
    odom_topic: /odom               # 参照するオドメトリトピック
    enable_groot_monitoring: True   # groot を使用して Rviz2 上へ可視化するかどうか
    groot_zmq_publisher_port: 1666  # groot 用ポート
    groot_zmq_server_port: 1667     # groot 用ポート
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"   # デフォルトのファイルを使用します。
    plugin_lib_names:               # bt_navigator で使用するノードライブラリ
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True                              # シミュレーション時間を使用するかどうか

    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

controller_server:
  ros__parameters:
    use_sim_time: True                            # シミュレーション時間を使用するかどうか
    controller_frequency: 20.0                    # コントローラの実行周期(Hz)
    min_x_velocity_threshold: 0.001               # x方向0.001m/s以下のオドメトリ指令を無視
    min_y_velocity_threshold: 0.5                 # y方向0.5m/s以下のオドメトリ指令を無視
    min_theta_velocity_threshold: 0.001           # 回転角速度0.001rad/s以下の指令を無視
    progress_checker_plugin: "progress_checker"   # デフォルトのプラグイン
    goal_checker_plugin: "goal_checker"           # デフォルトのプラグイン
    controller_plugins: ["FollowPath"]            # デフォルトのプラグイン

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5               # 0.5mより近いゴール位置を無視
      movement_time_allowance: 10.0               # ロボットが最小半径を移動するのに要する時間
    # Goal checker parameters
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25                     # ゴール判定の許容基準 
      yaw_goal_tolerance: 0.25                    # ゴール判定の許容基準 
      stateful: True                              # 目標向きに回転後、xy位置を再判定するかどうか
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True          # デバッグ用の軌跡を出力するかどうか    
      min_vel_x: 0.0                          # x最小速度m/s
      min_vel_y: 0.0                          # y最小速度m/s
      max_vel_x: 0.52                         # x最大速度m/s
      max_vel_y: 0.0                          # y最大速度m/s
      max_vel_theta: 1.0                      # 最大角速度 rad/s
      min_speed_xy: 0.0                       # 最小並進速度m/s
      max_speed_xy: 0.26                      # 最大並進速度m/s
      min_speed_theta: 0.0                    # 最小角速度 rad/s
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5                          # x最大加速度m/s^2
      acc_lim_y: 0.0                          # y最大加速度m/s^2
      acc_lim_theta: 3.2                      # 回転最大加速度rad/s^2
      decel_lim_x: -2.5                       # x最大減速度m/s^2
      decel_lim_y: 0.0                        # x最大減速度m/s^2
      decel_lim_theta: -3.2                   # 回転最大減速度rad/s^2
      vx_samples: 20                          # x方向の速度サンプル数
      vy_samples: 5                           # y方向の速度サンプル数
      vtheta_samples: 20                      # 角度方向の速度サンプル数
      sim_time: 1.7                           # 1.7s 先をシミュレート
      linear_granularity: 0.05                # 投影する前方の直線距離(m)
      angular_granularity: 0.025              # 投影する角度距離
      transform_tolerance: 0.2                # tf変換の許容値
      xy_goal_tolerance: 0.25                 # ゴール判定の許容基準
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True # 最高スコアのルートで固定
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02                # BaseObstacle で判別する重み
      PathAlign.scale: 32.0                   # PathAlign で判別する重み
      PathAlign.forward_point_distance: 0.1   # 角度の変化を計算するために、ロボットの0.1m先を使用
      GoalAlign.scale: 24.0                   # GoalAlign で判別する重み
      GoalAlign.forward_point_distance: 0.1   # 角度の変化を計算するために、ロボットの0.1m先を使用
      PathDist.scale: 32.0                    # PathDist で判別する重み
      GoalDist.scale: 24.0                    # GoalDist で判別する重み
      RotateToGoal.scale: 32.0                # RotateToGoal で判別する重み
      RotateToGoal.slowing_factor: 5.0        # ゴールに向かって回転している間、ロボットの動作を遅くする重み
      RotateToGoal.lookahead_time: -1.0       # >0 の場合、衝突を待つ時間

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True                          # シミュレーション時間を使用するかどうか

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      ax_max: 3.0
      ax_min: -3.0
      ay_max: 3.0
      az_max: 3.5
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 0.5
      vx_min: -0.35
      vy_max: 0.5
      wz_max: 1.9
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: true
      regenerate_noises: true
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 0.2
      critics: [
        "ConstraintCritic", "CostCritic", "GoalCritic",
        "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic",
        "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 1.0
        trajectory_point_step: 2
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.5
        offset_from_furthest: 20
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        mode: 0
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters: 
      update_frequency: 5.0                   # コストマップの更新周期
      publish_frequency: 2.0                  # コストマップの発信周期
      global_frame: odom                      # 参照フレーム
      robot_base_frame: base_link             # ロボットのベースフレーム
      use_sim_time: True                      # シミュレーション時間を使用するかどうか
      rolling_window: true                    # コストマップがロボットのベースフレームと一緒に回転するかどうか
      width: 3                                # コストマップの幅(m)
      height: 3                               # コストマップの高さ(m)
      resolution: 0.05                        # コストマップ1px当たり判定の解像度
      robot_radius: 0.22                      # ロボット半径
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:    #指数関数的減衰でコストマップの致命的な障害物を膨らませます 
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0      # コストマップの障害物判定半径の減衰係数
        inflation_radius: 0.55        # コストマップの障害物判定半径を追加で膨らませる半径
      voxel_layer:        # 深度およびレーザー センサーの読み取り値とレイキャスティングを使用して永続的な 3D ボクセル レイヤーを維持し、空き領域をクリアします
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True                 # 有効化
        publish_voxel_map: True       # デバッグ用に3Dボクセルマップを出力するかどうか
        origin_z: 0.0                 # ボクセルマークの開始位置
        z_resolution: 0.05            # ボクセル高さの解像度
        z_voxels: 16                  # ボクセル数？
        max_obstacle_height: 2.0      # ボクセルマップの最大高さ
        mark_threshold: 0             # ボクセルの最小数
        observation_sources: scan     # ボクセル作成用のソース
        scan:
          topic: /scan
          max_obstacle_height: 2.0    # ボクセルマップの最大高さ
          clearing: True              # コストマップでscanをクリアするかどうか
          marking: True               # scan をマークするかどうか
          data_type: "LaserScan"      # データタイプ
      static_layer:
        map_subscribe_transient_local: True   # マップトピックのQoS設定
      always_send_full_costmap: True          # 地図の更新周期ごとに完全なコストマップを送信するかどうか
  local_costmap_client:
    ros__parameters:
      use_sim_time: True                      # シミュレーション時間を使用するかどうか
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True                      # シミュレーション時間を使用するかどうか

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True                      # シミュレーション時間を使用するかどうか
      robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true               # true:不明なスペースを空き領域として扱わない
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:   # レイキャスティングを使用して 2D レーザー スキャンから永続的な 2D コストマップを維持し、空き領域をクリアします
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True                            # シミュレーション時間を使用するかどうか
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True                            # シミュレーション時間を使用するかどうか      always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
map_server:
  ros__parameters:
    use_sim_time: True                              # シミュレーション時間を使用するかどうか
    yaml_filename: "map.yaml"                       # map 設定ファイルの保存場所

map_saver:
  ros__parameters:
    use_sim_time: True                              # シミュレーション時間を使用するかどうか
    save_map_timeout: 5000                          # map 保存を試みるタイムアウト時間
    free_thresh_default: 0.25                       # グリッドマップの空き領域の判別しきい値
    occupied_thresh_default: 0.65                   # グリッドマップの占有判別しきい値
    map_subscribe_transient_local: False            # 説明なし→なくなった？

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0                # プランナーの頻度
    use_sim_time: True                              # シミュレーション時間を使用するかどうか
    planner_plugins: ["GridBased"]                  # 使用するプラグイン
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5                                # 要求されたゴールと経路計画の終点との差の許容値
      use_astar: false                              # A* を使用するかどうか　※要調査
      allow_unknown: true                           # 未知空間への経路計画を許容するかどうか

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True                              # シミュレーション時間を使用するかどうか

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw            # local_costmap からサブスクライブ
    footprint_topic: local_costmap/published_footprint  # local_costmap からサブスクライブ
    cycle_frequency: 10.0                               # 実行頻度
    recovery_plugins: ["spin", "back_up", "wait"]       # 使用するプラグイン
    spin:
      plugin: "nav2_recoveries/Spin"
    back_up:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom                                  # 参照フレーム
    robot_base_frame: base_link                         # ロボットベースフレーム
    transform_timeout: 0.1                              # tf 変換のタイムアウト時間 (s)
    use_sim_time: true                                  # シミュレーション時間を使用するかどうか
    simulate_ahead_time: 2.0                            # 衝突先読み時間 (s)
    max_rotational_vel: 1.0                             # 最大回転速度 (rad/s)
    min_rotational_vel: 0.4                             # 最小回転速度 (rad/s)
    rotational_acc_lim: 3.2                             # 最大回転加速度 (rad/s^2)


smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.0]
    min_velocity: [-0.5, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15

loopback_simulator:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "base_scan"  # tb4_loopback_simulator.launch.py remaps to 'rplidar_link'
    update_duration: 0.02